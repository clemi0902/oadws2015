/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import intellicourse.entity.Room;
import intellicourse.util.HibernateUtil;
import java.util.List;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JFormattedTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatter;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Clemens
 */
public class ChooseRoomDialog extends javax.swing.JDialog {

    private Room result = null;
    private List <Room> resultList = null;
    /**
     * Creates new form ChooseRoomDialog
     */
    public ChooseRoomDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tfName.getDocument().addDocumentListener(new MyDocumentListener());
        JFormattedTextField field  = (JFormattedTextField) spSeats.getEditor().getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);
        spSeats.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                ChooseRoomDialog.this.showFilteredData();
            }
        });
        showFilteredData();
    }
    
    public Room setVisible()
    {
        this.setVisible(true);
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbRooms = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        spSeats = new javax.swing.JSpinner(new SpinnerNumberModel());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(tbRooms);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout());

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        jLabel1.setText("Name");
        jPanel2.add(jLabel1);

        jLabel2.setText("Min Seats");
        jPanel2.add(jLabel2);
        jPanel2.add(tfName);
        jPanel2.add(spSeats);

        jPanel2.setBorder(BorderFactory.createTitledBorder("Filter"));

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int index = tbRooms.getSelectedRow();
        result = resultList.get(index);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseRoomDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseRoomDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseRoomDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseRoomDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChooseRoomDialog dialog = new ChooseRoomDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private void showFilteredData() {
        checkInput();
        String QUERY = null;
        if (tfName.getText().trim().equals("") && spSeats.getModel().getValue().toString().trim().equals("")) {
            QUERY = "from Room";
        } else if (tfName.getText().trim().equals("")) {
            QUERY = "from Room WHERE anzSitzplatz >= " + spSeats.getModel().getValue().toString();
        } else if (spSeats.getModel().getValue().toString().trim().equals("")) {
            QUERY = "from Room WHERE UPPER(name) LIKE '" + tfName.getText().toUpperCase() + "%'";
        } else {
            QUERY = "from Room WHERE anzSitzplatz >= " + spSeats.getModel().getValue().toString()
                    + " AND UPPER(name) LIKE '" + tfName.getText().toUpperCase() + "%'";
        }
        executeQuery(QUERY);

    }

    private void executeQuery(String query) {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(query);
            resultList = q.list();
            displayResult(resultList);
            session.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void displayResult(List resultList) {
        Vector<String> tableHead = new Vector<String>();
        Vector tableData = new Vector();
        tableHead.add("RoomID");
        tableHead.add("Room Name");
        tableHead.add("Number of Seats");
        for (Object o : resultList) {

            Room r = (Room) o;
            Vector<Object> row = new Vector<>();
            row.add(r.getRid());
            row.add(r.getName());
            row.add(r.getAnzSitzplatz());
            tableData.add(row);
        }
        tbRooms.setModel(new DefaultTableModel(tableData, tableHead));

    }
    
        private void checkInput() {
        try {
            int input = Integer.parseInt(spSeats.getModel().getValue().toString());
        } catch (Exception e) {
            spSeats.getModel().setValue("");
        }

    }
        
        
            private class MyDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            changeTable();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            changeTable();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            changeTable();
        }

        private void changeTable() {
            ChooseRoomDialog.this.showFilteredData();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spSeats;
    private javax.swing.JTable tbRooms;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
