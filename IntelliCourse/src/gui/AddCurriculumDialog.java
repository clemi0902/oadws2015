/* AddCurriculumDialog
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import intellicourse.entity.Curriculum;
import intellicourse.entity.Lecture;
import java.awt.Image;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import intellicourse.util.HibernateUtil;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.hibernate.type.IntegerType;
import org.hibernate.type.StringType;

/**
 *
 * @author Clemens
 */
public class AddCurriculumDialog extends javax.swing.JDialog {

    //some variables;
        int courseid[] = new int[100];
        int cCount = 0;
        int editID = 0;
        
    /**
     * Creates new form AddCurriculumDialog
     */
    public AddCurriculumDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setTitle("Add Curriculum");
        initComponents();
        jfFilterField.getDocument().addDocumentListener(new MyDocumentListener());
        courseid[0] = -1;
        displayData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jbOkButton = new javax.swing.JButton();
        jbCancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbAddToCurricula = new javax.swing.JButton();
        jbDeleteFromCurricula = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCurriculaCourses = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtAllCourses = new javax.swing.JTable();
        jfFilterField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jbOkButton.setText("Ok");
        jbOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkButtonActionPerformed(evt);
            }
        });
        jPanel4.add(jbOkButton);

        jbCancelButton.setText("Cancel");
        jbCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelButtonActionPerformed(evt);
            }
        });
        jPanel4.add(jbCancelButton);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        try{
            Image img = ImageIO.read(getClass().getResource("../resources/arrow-left.png"));
            Image resizedImage = img.getScaledInstance(30, 30, java.awt.Image.SCALE_SMOOTH);
            jbAddToCurricula.setIcon(new ImageIcon(resizedImage));
        }catch(IOException ex)
        {
        }
        jbAddToCurricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddToCurriculaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jbAddToCurricula, gridBagConstraints);

        try{
            Image img = ImageIO.read(getClass().getResource("../resources/arrow-right.png"));
            Image resizedImage = img.getScaledInstance(30, 30, java.awt.Image.SCALE_SMOOTH);
            jbDeleteFromCurricula.setIcon(new ImageIcon(resizedImage));
        }catch(IOException ex)
        {
        }
        jbDeleteFromCurricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteFromCurriculaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jbDeleteFromCurricula, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(BorderFactory.createTitledBorder("Curriculum"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jtCurriculaCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},

            },
            new String [] {
                "LID", "Name", "Beschreibung"
            }
        ));
        jScrollPane1.setViewportView(jtCurriculaCourses);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

        jPanel3.setBorder(BorderFactory.createTitledBorder("Lectures"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jtAllCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {20, "jkl", "asdf"},
                {21, "qwer", "few"}

            },
            new String [] {
                "LID", "Name", "Beschreibung"
            }
        ));
        jScrollPane2.setViewportView(jtAllCourses);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.EAST);

        jfFilterField.setBorder(BorderFactory.createTitledBorder("Filter Name"));
        jPanel3.add(jfFilterField, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>                        

    private void jbDeleteFromCurriculaActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
        int rowindex = jtCurriculaCourses.getSelectedRow();
        int tmp = Integer.parseInt(jtCurriculaCourses.getValueAt(rowindex, 0).toString());
        for(int i = 0; i <= cCount; i++)
        {
            if(courseid[i] == tmp)
            {
                courseid[i] = courseid[cCount];
                courseid[cCount] = 0;
                break;
            }
        }
        if(!(cCount == 0)) { cCount--; }
        
        showSelectedCourse();
    }                                                     

    private void jbOkButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String curriculaName = JOptionPane.showInputDialog(this, "Curriculum Name:","Enter Curriculum Name", JOptionPane.PLAIN_MESSAGE);
        while(curriculaName.equals(""))
        {
            curriculaName = JOptionPane.showInputDialog(this, "No Name Entered Before\nCurriculum Name:","Enter Curriculum Name", JOptionPane.PLAIN_MESSAGE);
        }
        addCurricula(curriculaName);
    }                                          

    private void jbCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        this.dispose();
    }                                              

    private void jbAddToCurriculaActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        int rowindex = jtAllCourses.getSelectedRow();
        courseid[cCount] = Integer.parseInt(jtAllCourses.getValueAt(rowindex, 0).toString());
        cCount++;
        showSelectedCourse();
    }                                                

    public void editCurricula(int[] IDs, int numberId, int curriculaID) {
        for(int i = 0; i < numberId; i++) {
            courseid[i] = IDs[i];
        }
        cCount = numberId;
        editID = curriculaID;
        showSelectedCourse();
    }
    
    private void displayData() {
        String sql;
        sql = "select l.lid, l.name, l.beschreibung from Lecture as l "
                + "WHERE UPPER(l.name) LIKE '" + jfFilterField.getText().trim().toUpperCase() + "%'";
        executeQuery(sql, jtAllCourses);
    }
    
    private void showSelectedCourse() {
        String sql;
        sql = "select l.lid, l.name, l.beschreibung from Lecture as l "
                + "WHERE l.lid = " + Integer.toString(courseid[0]);
        
        for(int i = 1; i <= cCount && cCount != 0; i++)
        {
            sql += " OR l.lid = " + Integer.toString(courseid[i]); 
        }
        executeQuery(sql, jtCurriculaCourses);
    }  
    
    private void executeQuery(String query, JTable table) {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            SQLQuery q = session.createSQLQuery(query);
            q.addScalar("lid",new IntegerType());
            q.addScalar("name",new StringType());
            q.addScalar("beschreibung",new StringType());
            q.setResultTransformer(Transformers.aliasToBean(Lecture.class));
            List<Lecture> resultList = q.list();
            displayResult(resultList, table);
            session.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    private void displayResult(List resultList, JTable table) {
        Vector<String> tableHead = new Vector<String>();
        Vector tableData = new Vector();
        tableHead.add("Lid");
        tableHead.add("Name");
        tableHead.add("Beschreibung");
        
        for (Object o : resultList) {
            Lecture lecture = new Lecture();
            
            Lecture l = (Lecture) o;
            Vector<Object> row = new Vector<>();
            row.add(l.getLid());
            row.add(l.getName());
            row.add(l.getBeschreibung());           
            tableData.add(row);
        }
        table.setModel(new DefaultTableModel(tableData, tableHead));
    }
      
    private void addCurricula(String name)
    {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            
            Curriculum curriculum = null;
            
            if(editID != 0)
            {
                String tmp = "SELECT * FROM curriculum AS c WHERE c.cid = " + Integer.toString(editID);
                SQLQuery quer = session.createSQLQuery(tmp);
                quer.setResultTransformer(Transformers.aliasToBean(Curriculum.class));
                List<Curriculum> resultList = quer.list();
                
                for(Object o : resultList)
                {
                    curriculum = (Curriculum) o;
                }
            }
            if (curriculum == null)
            {
               curriculum = new Curriculum();
            }
            
            curriculum.setName(name);
            
            Set<Lecture> courses = new HashSet(0);
            
            String sql;
            sql = "select l.lid, l.name, l.beschreibung from Lecture as l "
                    + "WHERE l.lid = " + Integer.toString(courseid[0]);

            for(int i = 1; i <= cCount && cCount != 0; i++)
            {
                sql += " OR l.lid = " + Integer.toString(courseid[i]); 
            }
            SQLQuery q = session.createSQLQuery(sql);
            q.setResultTransformer(Transformers.aliasToBean(Lecture.class));
            List<Lecture> resultList = q.list();
            
            for (Object o : resultList) {
                Lecture tmp = (Lecture) o;
                courses.add(tmp);
            }
            
            curriculum.setLectures(courses);
            
            if(editID != 0)
            { session.update(curriculum); }
            else
            { session.save(curriculum); }
            session.getTransaction().commit();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCurriculumDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCurriculumDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCurriculumDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCurriculumDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddCurriculumDialog dialog = new AddCurriculumDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAddToCurricula;
    private javax.swing.JButton jbCancelButton;
    private javax.swing.JButton jbDeleteFromCurricula;
    private javax.swing.JButton jbOkButton;
    private javax.swing.JTextField jfFilterField;
    private javax.swing.JTable jtAllCourses;
    private javax.swing.JTable jtCurriculaCourses;
    // End of variables declaration                   

    private class MyDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            AddCurriculumDialog.this.displayData();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            AddCurriculumDialog.this.displayData();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            AddCurriculumDialog.this.displayData();
        }
    }
}
