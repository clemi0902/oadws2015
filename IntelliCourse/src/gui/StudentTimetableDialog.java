/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import intellicourse.util.HibernateUtil;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.table.DefaultTableModel;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author Clemens
 */
public class StudentTimetableDialog extends javax.swing.JDialog {

    private int uid;
    private Properties p = new Properties();

    public void setUid(int uid) {
        this.uid = uid;
        this.setVisible(true);
    }
    /**
     * Creates new form StudentTimetableDialog
     */
    
    
    
    public StudentTimetableDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        initComponents();
        
        this.setTitle("Student Timetable");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new TeacherTimeTableModel());
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        jPanel1.setLayout(new java.awt.BorderLayout());

        UtilDateModel model = new UtilDateModel();
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        jPanel1.add(datePicker);

        jPanel2.add(jPanel1);

        jButton1.setText("Show Week");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date dat;
        Date vDat;
        String mon, sun;
        int zl = 0;
        int sp = 0;
        int i = 0;
        long tag;
       
        SimpleDateFormat sdfToDate = new SimpleDateFormat("yyyy-MM-dd");
        
        List<Object> resultList = null;
        try {
            dat =  setDate2Mon();
            mon = getDay(dat, 0);
            sun = getDay(dat,6);
            resultList = getData(mon, sun);

            if (resultList != null) 
            {
                Iterator itr = resultList.iterator();
                vDat = sdfToDate.parse(mon);
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn(mon);
                model.addRow(new Object[]{""});
                while (itr.hasNext()) {
                    Object[] o = (Object[]) itr.next();
                    if(vDat.getTime() < sdfToDate.parse(String.valueOf(o[1])).getTime())
                    {   
                        tag = vDat.getTime() + 86400000;

                        while(tag < sdfToDate.parse(String.valueOf(o[1])).getTime())
                         {
                             tag+= 86400000;
                             model.addColumn(getDay(vDat, 1));
                             sp++;                                
                         } 

                         vDat = sdfToDate.parse(String.valueOf(o[1]));
                         model.addColumn(getDay(vDat, 0));
                         sp++;
                        
                        zl = 0;
                    }
                    model.setValueAt("" + String.valueOf(o[2]) + " - " + String.valueOf(o[3]) + " " + String.valueOf(o[0]), zl, sp);
                    zl++;
                    if(model.getRowCount() <= zl)
                    {
                        model.addRow(new Object[]{""});
                    }           
                }
                Date d = sdfToDate.parse(sun);
                if(vDat.getTime() < d.getTime())
                {
                    tag = vDat.getTime() + 86400000;

                    while(tag <= d.getTime())
                     {
                         tag+= 86400000;
                         model.addColumn(getDay(vDat, 1));                              
                     } 
                }
                jTable1.setModel(model);
            }    
        } catch (ParseException ex) {
            Logger.getLogger(StudentTimetableDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jButton1ActionPerformed
    private List<Object>  getData(String start, String end)
    {
        String QUERY = "SELECT DISTINCT l.name,cdt.day, cdt.von, cdt.bis FROM lecture l "
                + " INNER JOIN student_lecture sl on (l.lid = sl.lid) "
                + " INNER JOIN course c ON (l.lid = c.lid) "
                + " INNER JOIN course_day_time cdt ON (c.lid = cdt.lid) "
                + " WHERE sl.uid = " + uid + " "
                + " AND cdt.day >= '" + start + "'"
                + " AND cdt.day <= '" + end + "'"
                + " ORDER BY cdt.day, cdt.von, cdt.bis";
        
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        List<Object> resultList = null;
        if (!QUERY.equals("")) {
            SQLQuery q = session.createSQLQuery(QUERY);
            resultList = (List<Object>) q.list();
        }
        session.getTransaction().commit();
        session.close();        
        return resultList;        
    }
    
    private String getDay(Date dat, Integer z)
    {
        DateFormat dfmt = new SimpleDateFormat( "yyyy-MM-dd" );
        Calendar getDay = Calendar.getInstance();
        getDay.setTime(dat);
        getDay.add(Calendar.DAY_OF_YEAR,  z);
        return dfmt.format(getDay.getTime()); 
    }
    
    private Date setDate2Mon() throws ParseException {
        JDatePickerImpl dpiDate = (JDatePickerImpl) jPanel1.getComponent(0);
        Date startDate = (Date) dpiDate.getModel().getValue();
        
        Calendar monday = Calendar.getInstance();
        monday.setTime(startDate);

        int weekday = monday.get(Calendar.DAY_OF_WEEK);
        if (weekday != Calendar.MONDAY) {
            int days = ((Calendar.SATURDAY - weekday + 2) % 7);
            monday.add(Calendar.DAY_OF_YEAR, days);
            monday.add(Calendar.DAY_OF_YEAR,  -7);
        }
        Date date = monday.getTime();
        return date;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentTimetableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentTimetableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentTimetableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentTimetableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StudentTimetableDialog dialog = new StudentTimetableDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

        private class DateLabelFormatter extends JFormattedTextField.AbstractFormatter {

        private String datePattern = "dd.MM.yyyy";
        private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

        @Override
        public Object stringToValue(String text) throws ParseException {
            return dateFormatter.parseObject(text);
        }

        @Override
        public String valueToString(Object value) throws ParseException {
            if (value != null) {
                Calendar cal = (Calendar) value;
                return dateFormatter.format(cal.getTime());
            }

            return "";
        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
